// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package interfacestest

import (
	"github.com/ONSdigital/dp-frontend-feedback-controller/interfaces"
	"sync"
)

var (
	lockRendererMockDo sync.RWMutex
)

// Ensure, that RendererMock does implement Renderer.
// If this is not the case, regenerate this file with moq.
var _ interfaces.Renderer = &RendererMock{}

// RendererMock is a mock implementation of interfaces.Renderer.
//
//     func TestSomethingThatUsesRenderer(t *testing.T) {
//
//         // make and configure a mocked interfaces.Renderer
//         mockedRenderer := &RendererMock{
//             DoFunc: func(path string, b []byte) ([]byte, error) {
// 	               panic("mock out the Do method")
//             },
//         }
//
//         // use mockedRenderer in code that requires interfaces.Renderer
//         // and then make assertions.
//
//     }
type RendererMock struct {
	// DoFunc mocks the Do method.
	DoFunc func(path string, b []byte) ([]byte, error)

	// calls tracks calls to the methods.
	calls struct {
		// Do holds details about calls to the Do method.
		Do []struct {
			// Path is the path argument value.
			Path string
			// B is the b argument value.
			B []byte
		}
	}
}

// Do calls DoFunc.
func (mock *RendererMock) Do(path string, b []byte) ([]byte, error) {
	if mock.DoFunc == nil {
		panic("RendererMock.DoFunc: method is nil but Renderer.Do was just called")
	}
	callInfo := struct {
		Path string
		B    []byte
	}{
		Path: path,
		B:    b,
	}
	lockRendererMockDo.Lock()
	mock.calls.Do = append(mock.calls.Do, callInfo)
	lockRendererMockDo.Unlock()
	return mock.DoFunc(path, b)
}

// DoCalls gets all the calls that were made to Do.
// Check the length with:
//     len(mockedRenderer.DoCalls())
func (mock *RendererMock) DoCalls() []struct {
	Path string
	B    []byte
} {
	var calls []struct {
		Path string
		B    []byte
	}
	lockRendererMockDo.RLock()
	calls = mock.calls.Do
	lockRendererMockDo.RUnlock()
	return calls
}
